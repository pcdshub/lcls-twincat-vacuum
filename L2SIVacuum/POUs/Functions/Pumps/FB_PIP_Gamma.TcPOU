<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PIP_Gamma" Id="{c735b214-fb8d-491c-9d35-e2f8609cfbf0}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block does basic controls FOR the ION pump connected to a Gamma QPCe controller.
 Provides interlocking interface. Enable HV only when interlock gauge press is less than 1.0E-4 Torr *)
FUNCTION_BLOCK FB_PIP_Gamma
VAR_INPUT
	i_stGauge	:	ST_VG; //Ion or Pirani gauge for pump interlock 
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv: 
	'}
	stPump	:	ST_PIP; //Gamma Ion pump structure
	q_IG	:	ST_VG; //When ion pump is used as a measuring device for interlocking gate valves
END_VAR
VAR_IN_OUT
END_VAR
VAR
 rPRESS : REAL;
 iOffset: INT:=11;
 rV : REAL;
 rHVEna_SP : REAL :=1E-4; // Default protection setpoint as per the gamma QPCe manual
 (* IO Controls *)
 q_xHVEna_DO AT %Q*: BOOL;	// Enable High Voltage when TRUE
 i_iPRESS  AT %I*: INT;  //
 i_xSP_DI  AT %I* : BOOL; // NO contact // 'TcLinkTo' (EL1004) ^Input

// For logging
fbLogger : FB_LogMessage := (eSubsystem:=E_SubSystem.VACUUM);
tAction : F_TRIG; // Primary action of this device (OPN_DO, PUMP_RUN, etc.)
tOverrideActivated : R_TRIG;

tPumpStartTimeout : TON(PT:=T#10s); // Timeout pump start if pressure < 1E-11 for more than 10s.
MinPressure : REAL:= 1E-11; // Minimum readback pressure, pump must register pressure above this to be considered running
 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Does Gamma Ion pump HV interlock. Enable HV only when interlock gauge press is less than 1.0E-4 Torr *)

(*Ensures the set point is not higher than 1.0E-4*)
IF (stPump.rHVEna_SP > rHVEna_SP) THEN
	stPump.rHVEna_SP := rHVEna_SP;
END_IF

(* Interlock *)
stPump.xHV_ExtIlk  := (i_stGauge.xPRESS_OK AND (i_stGauge.rPRESS <= stPump.rHVEna_SP) AND NOT tPumpStartTimeout.Q);

// Log pump turned off from loss of interlock
tAction(CLK:= stPump.xHV_ExtIlk);
IF tAction.Q AND stPump.xHVEna_SW THEN fbLogger(sMsg:='Pump turned off due to loss of interlock.', eSevr:=TcEventSeverity.Critical); END_IF

(* Enable HV *)
stPump.q_xHVEna_DO := stPump.xHVEna_SW AND stPump.xHV_ExtIlk;
stPump.xHVEna_SW := stPump.q_xHVEna_DO;

(*Update output gauge values*)
ACT_SetGauge();
(*Soft IO Mapping*)
IO();
]]></ST>
    </Implementation>
    <Action Name="ACT_SetGauge" Id="{7f72f23c-b05a-4919-b11f-c886c11a10b4}">
      <Implementation>
        <ST><![CDATA[(*MG*)
(* convert the analog input into readable pressure*)
(* use logarithmic Pressure calculation, Output= Normal and Offset = 0*)
rV := 10*INT_TO_REAL(i_iPress)/32767;
rPRESS := LREAL_TO_REAL(EXPT(10,(rV-iOffset))); (*offset = 11*)
	q_IG.rPRESS := rPRESS;
	stPump.rPRESS := rPRESS;
IF (stPump.i_xSP_DI) OR ((q_IG.rPRESS < q_IG.rVAC_SP) AND (q_IG.rPRESS<>0) AND stPump.q_xHVEna_DO) THEN 
	q_IG.xPRESS_OK := TRUE;
	ELSE
	q_IG.xPRESS_OK := FALSE;
END_IF

// TAW Experimental ion pump timeout
tPumpStartTimeout(IN:=(q_IG.rPRESS<=MinPressure AND stPump.q_xHVEna_DO));]]></ST>
      </Implementation>
    </Action>
    <Action Name="IO" Id="{a9e5b5c0-3557-4ce9-a1b9-765648e955e7}">
      <Implementation>
        <ST><![CDATA[
(*inputs*)
stPump.i_iPRESS:=	i_iPRESS;  
stPump.i_xSP_DI:=	i_xSP_DI;
(*output*)
q_xHVEna_DO:=  stPump.q_xHVEna_DO; //According to Manual pin should be grounded to activate function]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_Run" Id="{55fab705-c400-4b7f-9779-42233f752de0}">
      <Declaration><![CDATA[
METHOD PUBLIC M_Run : BOOL
VAR_INPUT
	run:bool; // set to true to run, false to stop;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
this^.stPump.xHVEna_SW := run;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>