<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <DUT Name="ST_VGC" Id="{0b7dfc27-9760-4c7a-bad2-fa375ac628b8}">
    <Declaration><![CDATA[TYPE ST_VGC :
STRUCT


	
(* EPICS Controls *)
	{attribute 'pytmc' := '
	pv: OPN_SW; 
	field: ZNAM CLOSE; 
	field: ONAM OPEN;
	io: io ;
	'}
	pv_xOPN_SW	: BOOL;
	{attribute 'pytmc' := '
    pv: ALM_RST;
	io: io;
    '}
	pv_xAlmRst	: BOOL;
	{attribute 'pytmc' := '
    pv: FORCE_OPN;
	io: io;
	field: ZNAM FALSE;
	field: ONAM OPEN;
    '}
	pv_xOvrdOpn	:	BOOL;

	{attribute 'pytmc' := '
	pv: OVRD_ON ;
	field: ZNAM OVERRIDE ON ;
	field: ONAM OVERRIDE OFF;
	io: io;
	'}
	xOverrideMode	:	BOOL; (* Shows the override status of this valve *)

	
	(* I/Os*)
(* Readbacks *)
	{attribute 'pytmc' := '
	pv: OPN_DI;
	io: i;
	field: ZNAM FALSE;
	field: ONAM OPENED;
	'}
	i_xOpnLS	: BOOL;
	{attribute 'pytmc' := '
    pv: CLS_DI;
	io: i;
	field: ZNAM FALSE;
	field: ONAM CLOSED;
    '}
	i_xClsLS	: BOOL;
(* Controls *)
	{attribute 'pytmc' := '
    pv: OPN_DO;
	field: ZNAM FALSE; 
	field: ONAM TRUE;
	io: i;
    '}
	q_xOPN_DO	: BOOL;
	
(* Interlocks *)

	{attribute 'pytmc' := '
	pv: EXT_ILK_OK ;
	field: ZNAM NOT OK ;
	field: ONAM OK ;
	io: i ;
	'}
	xEXT_OK	:	BOOL := FALSE;	(* External interlock for custom interlocking in addition to regular DP ilk, this must be set true, or the interlock condition before calling the FB_VGC *)
	
	{attribute 'pytmc' := '
    pv: DP_OK;
	field: ZNAM DP NOT OK ;
	field: ONAM DP OK ;
	io: i;
    '}
	xDP_OK	:	BOOL;	(* Managed by the VGC function (FB_VGC) *)// Indicates the valve can be opened because the differential pressure is low enough

	{attribute 'pytmc' := '
    pv: OPN_OK;
	field: ZNAM OPN ILK NOT OK ;
	field: ONAM OPN ILK OK ;
	io: i;
 	'}
	xOPN_OK	:	BOOL;	(* Final SUM of DP_OK and EXT_OK, needed because it allows the DP ilk to be switched off, see FB_VGC.Dis_DPIlk *)
	
	{attribute 'pytmc' := ' 
	pv: AT_VAC_SP;
	field: ZNAM FALSE; 
	field: ONAM TRUE;
	io: o;
	'}
	rAT_VAC_SP	:	REAL := 0.01;	// Interlock setpoint for gauges on both sides of valve
	rAT_VAC_SP_LAST	:	REAL :=0.01 ;	// Interlock setpoint for gauges on both sides of valve
	{attribute 'pytmc' := '
    pv: AT_VAC_HYS;
	io: o;
    '}
	rAT_VAC_HYS	:	REAL :=0.01;	// Hysteresis of the vacuum sp
	{attribute 'pytmc' := '
    pv: HYST_PERC ;
	io: o;
    '}
	rHYST_PERC	:	REAL := 0.80;	// Hysteresis percentage

	{attribute 'pytmc' := '
	pv: AT_VAC ; 
	field: ZNAM NOT AT VAC ;
	field: ONAM AT VAC ;
	io: i;
	'}
	xAT_VAC	:	BOOL;	//At vacuum setpoint


(* Alarm Outputs *)
	{attribute 'pytmc' := '
    pv: ERR_DifPres;
	field: ZNAM NO ERROR ;
	field: ONAM Differential error present ;
	io: o;
    '}
	xERR_DifPres		: 	BOOL;
	{attribute 'pytmc' := '
    pv: ERR_SP;
	field: ZNAM NO ERROR ;
	field: ONAM Setpoint error present ;
	io: o;
    '}
	xERR_SP			: 	BOOL;
	{attribute 'pytmc' := '
    pv: ERR_Ext;
	field: ZNAM NO ERROR ;
	field: ONAM External error present ;
	io: o;
    '}
	xERR_ExtFault		: 	BOOL;
	xAlmSum			: 	BOOL;
	
	{attribute 'pytmc' := '
    pv: ERROR;
	field: ZNAM NO ERROR ;
	field: ONAM ERROR PRESENT ;
	io: o;
    '}
	bErrorPresent : BOOL;
	iErrorCode: INT;
	{attribute 'pytmc' := '
    pv: ErrMsg;
	io: o;
    '}
	sErrorMessage: STRING;

(*State*)	
	{attribute 'pytmc' := '
	pv: STATE;
	field: ZRST Vented;
	field: ONST At Vacuum;
	field: TWST Differential Pressure;
	field: THST Lost Vacuum;
	field: FRST Ext Fault;
	io: i;
	'}
	eVGC_State : E_VGC;
	
	{attribute 'pytmc' := '
	pv: POS_STATE ;
	type: mbbi ;
	field: ZRST OPEN ;
	field: ONST CLOSED ;
	field: TWST MOVING ;
	field: THST INVALID ;
	io: i
	'}
		
	eState	:	E_ValvePositionState := INVALID;
	
END_STRUCT
END_TYPE]]></Declaration>
  </DUT>
</TcPlcObject>